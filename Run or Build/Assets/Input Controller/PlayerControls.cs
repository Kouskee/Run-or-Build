//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Controller/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""RunnerMap"",
            ""id"": ""71eb29c4-5caa-4d62-ad6b-2f6a7b852139"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""26c03244-177c-4f39-a066-7ff67c9f1344"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b46f92f9-8ae8-4e16-acde-de16da0e0b56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""dcf704b4-ba4e-460d-b306-c3d3b227ee5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""960c984f-8b2a-44e3-a473-332c8b181910"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2752521a-02ba-4060-8cf8-fa23d1bbd45b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""29d6be45-5862-40e4-9e4a-518db250386e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": "" Arrows"",
                    ""id"": ""71728bc0-6f13-4b8b-9d6e-9280870f0885"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""467d1369-5a0b-402a-b640-1d4e50e2ecda"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1604e019-6e34-4271-abea-0ceda188de80"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c27df26c-e34e-47b8-9254-6c73422ed278"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""388d3a9b-a4ea-4c74-a592-cc05ff50d5f5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4706176b-fe17-4a5e-b896-9da71963a61e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5d2b4bf1-64eb-4019-a26f-6faf74b90e49"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0ec4849c-8c33-4567-8029-e861dafa0b71"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c5f73dd6-63b4-42fd-b587-3eec3affec6e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c7a08755-4bf7-470c-8594-a6512dd688b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb0cb74d-1614-42c2-94dd-e59a08ef22b5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae5237d7-5db2-46ab-86e3-058ff9953ee3"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gambler"",
            ""id"": ""882269e3-0719-4b61-a6d4-dfd8ae2c7c8e"",
            ""actions"": [
                {
                    ""name"": ""Change Level"",
                    ""type"": ""Button"",
                    ""id"": ""48c3589d-4377-4468-8650-60c86b5c1b71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Flying"",
                    ""type"": ""Value"",
                    ""id"": ""eca4dcbb-246b-4d27-b192-9bff55f0cff6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fc91119-0a9b-4a60-a6df-9198add03f82"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0)"",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Change Level"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cae6b796-f5a3-424d-bbed-78273eed721d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Change Level"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eac5da77-ef86-4b14-b1be-c3903d0c90f6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Change Level"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""13d4e8bf-fc09-4b14-8ce1-0ce6d0b55274"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flying"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d1bf322c-1cf0-4cf2-8058-da1461f68818"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""801d59c4-4ebb-4ffb-8b26-73f844edbd53"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0faa621a-5bf6-483a-a8f6-d5a74d81c1f9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fbd7b991-b088-4d9e-97ce-4fb6c35a6735"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and mouse"",
                    ""action"": ""Flying"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and mouse"",
            ""bindingGroup"": ""Keyboard and mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // RunnerMap
        m_RunnerMap = asset.FindActionMap("RunnerMap", throwIfNotFound: true);
        m_RunnerMap_Move = m_RunnerMap.FindAction("Move", throwIfNotFound: true);
        m_RunnerMap_Jump = m_RunnerMap.FindAction("Jump", throwIfNotFound: true);
        m_RunnerMap_Dash = m_RunnerMap.FindAction("Dash", throwIfNotFound: true);
        // Gambler
        m_Gambler = asset.FindActionMap("Gambler", throwIfNotFound: true);
        m_Gambler_ChangeLevel = m_Gambler.FindAction("Change Level", throwIfNotFound: true);
        m_Gambler_Flying = m_Gambler.FindAction("Flying", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RunnerMap
    private readonly InputActionMap m_RunnerMap;
    private IRunnerMapActions m_RunnerMapActionsCallbackInterface;
    private readonly InputAction m_RunnerMap_Move;
    private readonly InputAction m_RunnerMap_Jump;
    private readonly InputAction m_RunnerMap_Dash;
    public struct RunnerMapActions
    {
        private @PlayerControls m_Wrapper;
        public RunnerMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_RunnerMap_Move;
        public InputAction @Jump => m_Wrapper.m_RunnerMap_Jump;
        public InputAction @Dash => m_Wrapper.m_RunnerMap_Dash;
        public InputActionMap Get() { return m_Wrapper.m_RunnerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunnerMapActions set) { return set.Get(); }
        public void SetCallbacks(IRunnerMapActions instance)
        {
            if (m_Wrapper.m_RunnerMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_RunnerMapActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_RunnerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public RunnerMapActions @RunnerMap => new RunnerMapActions(this);

    // Gambler
    private readonly InputActionMap m_Gambler;
    private IGamblerActions m_GamblerActionsCallbackInterface;
    private readonly InputAction m_Gambler_ChangeLevel;
    private readonly InputAction m_Gambler_Flying;
    public struct GamblerActions
    {
        private @PlayerControls m_Wrapper;
        public GamblerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeLevel => m_Wrapper.m_Gambler_ChangeLevel;
        public InputAction @Flying => m_Wrapper.m_Gambler_Flying;
        public InputActionMap Get() { return m_Wrapper.m_Gambler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamblerActions set) { return set.Get(); }
        public void SetCallbacks(IGamblerActions instance)
        {
            if (m_Wrapper.m_GamblerActionsCallbackInterface != null)
            {
                @ChangeLevel.started -= m_Wrapper.m_GamblerActionsCallbackInterface.OnChangeLevel;
                @ChangeLevel.performed -= m_Wrapper.m_GamblerActionsCallbackInterface.OnChangeLevel;
                @ChangeLevel.canceled -= m_Wrapper.m_GamblerActionsCallbackInterface.OnChangeLevel;
                @Flying.started -= m_Wrapper.m_GamblerActionsCallbackInterface.OnFlying;
                @Flying.performed -= m_Wrapper.m_GamblerActionsCallbackInterface.OnFlying;
                @Flying.canceled -= m_Wrapper.m_GamblerActionsCallbackInterface.OnFlying;
            }
            m_Wrapper.m_GamblerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeLevel.started += instance.OnChangeLevel;
                @ChangeLevel.performed += instance.OnChangeLevel;
                @ChangeLevel.canceled += instance.OnChangeLevel;
                @Flying.started += instance.OnFlying;
                @Flying.performed += instance.OnFlying;
                @Flying.canceled += instance.OnFlying;
            }
        }
    }
    public GamblerActions @Gambler => new GamblerActions(this);
    private int m_KeyboardandmouseSchemeIndex = -1;
    public InputControlScheme KeyboardandmouseScheme
    {
        get
        {
            if (m_KeyboardandmouseSchemeIndex == -1) m_KeyboardandmouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and mouse");
            return asset.controlSchemes[m_KeyboardandmouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IRunnerMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IGamblerActions
    {
        void OnChangeLevel(InputAction.CallbackContext context);
        void OnFlying(InputAction.CallbackContext context);
    }
}
